
<colors>
<<include etc/colors.conf>>
</colors>

<fonts>
<<include etc/fonts.conf>>
</fonts>

<<include ideogram.conf>>
<<include ticks.conf>>

karyotype   = data/karyotype.human.txt

<image>
dir = /tmp
file  = circos-tutorial.png
png = yes
svg = yes
# radius of inscribed circle in image
radius         = 1500p
background     = white
# by default angle=0 is at 3 o'clock position
angle_offset   = -90
24bit = yes
auto_alpha_colors = yes
auto_alpha_steps = yes

</image>

chromosomes_units = 1000000
chromosomes       = hs1;hs2;hs3
chromosomes_display_default = no

#chromosomes_reverse = hs2

# lots of histograms here - let's take it one at a time

<plots>

type    = histogram

# tall histogram immediately inside the ideogram circle
# background* parameters define a colored backdrop for this histogram
# axes* define y-axes

<plot>

show = yes
max_gap = 5u
file    = data/6/snp.density.250kb.txt
color   = vdgrey
thickness = 1
min   = 0
max   = 0.015
r0    = 0.8r
r1    = 0.975r

background       = yes
background_color = vvlgrey
background_stroke_color = black
background_stroke_thickness = 2

axis           = yes
axis_color     = lgrey
axis_thickness = 2
axis_spacing   = 0.001

# color the histogram by value value and
# only plot points every 2Mb

<rules>

<rule>
importance = 125
condition  = _START_ % 2000000
show       = no
</rule>

<rule>
importance   = 100
condition    = _VALUE_ > 0.006
color = dgreen
</rule>

<rule>
importance   = 85
condition    = _VALUE_ < 0.002
color = dred
</rule>

</rules>

</plot>

# Dense histogram outside ideogram circle

<plot>

z = 5
show = yes
max_gap = 3u
file    = data/6/snp.density.txt
color   = black
thickness = 1
min   = 0
max   = 0.015
r0    = 1.05r
r1    = 1.175r
</plot>

# precomputed average of previous histogram, drawn
# underneath and filled under

<plot>
show = yes
max_gap = 1u
file    = data/6/snp.density.1mb.txt
fill_under = yes
fill_color = lred
color   = red
thickness = 1
min   = 0
max   = 0.015
r0    = 1.05r
r1    = 1.175r
</plot>


# histograms with randomly assigned values and
# bin sizes, illustrating how Circos handles
# variable-sized bins

# simple outline - bins are not extended

<plot>
show = yes
file    = data/6/hist.random.txt
extend_bin = no
color   = black
thickness = 1
min   = 0
max   = 1
r0    = 0.75r
r1    = 0.79r
</plot>

# simple outline - bins are extended

<plot>
show = yes
file    = data/6/hist.random.txt
color   = black
thickness = 1
min   = 0
max   = 1
r0    = 0.7r
r1    = 0.74r
</plot>

# colored by value - bins are not extended

<plot>
show = yes
file    = data/6/hist.random.2.txt
extend_bin = no
color   = black
thickness = 1
min   = 0
max   = 1
r0    = 0.65r
r1    = 0.69r
<rules>
<rule>
importance = 100
condition = _VALUE_ > 0.9
color = green
</rule>
<rule>
importance = 100
condition = _VALUE_ < 0.1
color = red
</rule>
<rule>
importance = 100
condition = _VALUE_ > 0.45 && _VALUE_ < 0.55
color = orange
</rule>
</rules>
</plot>

# colored by value - bins are extended

<plot>
show = yes
file    = data/6/hist.random.2.txt
color   = black
thickness = 1
min   = 0
max   = 1
r0    = 0.6r
r1    = 0.64r
<rules>
<rule>
importance = 100
condition = _VALUE_ > 0.9
color = green
</rule>
<rule>
importance = 100
condition = _VALUE_ < 0.1
color = red
</rule>
<rule>
importance = 100
condition = _VALUE_ > 0.45 && _VALUE_ < 0.55
color = orange
</rule>
</rules>
</plot>

# filled under with grey, oriented out (default)

<plot>
show = yes
extend_bin = no
z       = 5
file    = data/6/hist.random.3.txt
color   = black
fill_under = yes
fill_color = lgrey
thickness = 1
min   = 0
max   = 1
r0    = 0.55r
r1    = 0.59r
</plot>

# filled under with grey, oriented out (default) - bins are extended

<plot>
show = yes
z       = 5
file    = data/6/hist.random.3.txt
color   = black
fill_under = yes
fill_color = lgrey
thickness = 1
min   = 0
max   = 1
r0    = 0.5r
r1    = 0.54r
</plot>

# filled under with grey, oriented in

<plot>
z       = 5
orientation = in
file    = data/6/hist.random.4.txt
color   = black
fill_under = yes
fill_color = lblue
thickness = 1
min   = 0
max   = 1
r0    = 0.46r
r1    = 0.5r
</plot>

# filled under with orange, oriented out, 
# complementary to the previous histogram
#
# here, I've used the previous histogram data
# and remapped its value using a rule which
# assigns a new data value new=1-old
#
# this remapping has the effect of making the
# the histograms fit into one another (peak of one
# fits exactly into valley of other)

<plot>
z       = 5
file    = data/6/hist.random.4.txt
color   = black
fill_under = yes
fill_color = orange
thickness = 1
min   = 0
max   = 1
r0    = 0.46r
r1    = 0.5r
<rules>
<rule>
importance = 100
condition = 1
value = eval(1-_VALUE_)
</rule>
</rules>
</plot>

# another random histogram, oriented in

<plot>
orientation = in
file    = data/6/hist.random.5.txt
color   = black
fill_under = yes
fill_color = orange
thickness = 1
min   = 0
max   = 1
r0    = 0.42r
r1    = 0.46r
</plot>

<plot>
orientation = in
file    = data/6/hist.random.5.txt
color   = black
extend_bin = no
fill_under = yes
fill_color = orange
thickness = 1
min   = 0
max   = 1
r0    = 0.36r
r1    = 0.41r
</plot>

</plots>

anglestep       = 0.5
minslicestep    = 10
beziersamples   = 40
debug           = no
warnings        = no
imagemap        = no

# don't touch!
units_ok        = bupr
units_nounit    = n

